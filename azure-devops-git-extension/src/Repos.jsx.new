import React, { useState, useEffect } from 'react';
import { 
  Container, 
  Typography, 
  Box, 
  Paper, 
  Button, 
  AppBar, 
  Toolbar,
  CircularProgress,
  Snackbar,
  Alert
} from '@mui/material';
import { useNavigate } from 'react-router-dom';
import ApiManager from './services/ApiManager';
import ProjectsList from './components/ProjectsList';
import RepositoriesList from './components/RepositoriesList';
import BranchesList from './components/BranchesList';

function Repos() {
  // Data states
  const [projects, setProjects] = useState([]);
  const [repositories, setRepositories] = useState([]);
  const [branches, setBranches] = useState([]);
  
  // Selection states
  const [selectedProject, setSelectedProject] = useState(null);
  const [selectedRepository, setSelectedRepository] = useState(null);
  
  // UI states
  const [loading, setLoading] = useState(true);
  const [loadingMessage, setLoadingMessage] = useState('Loading...');
  const [error, setError] = useState(null);
  const [notification, setNotification] = useState({ open: false, message: '', severity: 'info' });
  const [view, setView] = useState('projects'); // 'projects', 'repositories', 'branches'
  
  const navigate = useNavigate();
  
  // Close notification
  const handleCloseNotification = () => {
    setNotification(prev => ({ ...prev, open: false }));
  };
  
  // Show notification
  const showNotification = (message, severity = 'info') => {
    setNotification({
      open: true,
      message,
      severity
    });
  };
  
  // Handle logout
  const handleLogout = () => {
    sessionStorage.removeItem('authData');
    ApiManager.clear();
    navigate('/');
  };
  
  // Initial data loading
  useEffect(() => {
    console.log('[Repos] Component mounted, initializing...');
    
    // Get or initialize the API service
    const apiService = ApiManager.getCurrentService() || ApiManager.loadFromSession();
    
    console.log('[Repos] API Service initialized:', !!apiService);
    
    if (!apiService) {
      console.error('[Repos] API service initialization failed');
      setError('API service not initialized. Please log in again.');
      setLoading(false);
      navigate('/');
      return;
    }

    // Fetch projects
    setLoading(true);
    setLoadingMessage('Loading projects...');
    setError(null);

    apiService.getProjects().subscribe({
      next: (data) => {
        console.log('[Repos] Projects data received:', data);
        if (data && data.value && data.value.length > 0) {
          console.log('[Repos] Projects found:', data.value.length);
          setProjects(data.value);
        } else {
          console.warn('[Repos] No projects data or empty array, adding sample data');
          // Add sample project data when API returns no projects
          const sampleProjects = [
            {
              id: 'sample-project-1',
              name: 'Sample Project',
              url: '#',
              state: 'wellFormed',
              revision: 1,
              visibility: 'private',
              lastUpdateTime: new Date().toISOString()
            }
          ];
          setProjects(sampleProjects);
        }
        setLoading(false);
      },
      error: (error) => {
        console.error('[Repos] Projects fetch error:', error);
        setError('Failed to fetch projects: ' + (error.message || 'Unknown error'));
        setLoading(false);
      }
    });
  }, [navigate]);
  
  // Handle project selection
  const handleSelectProject = (project) => {
    setSelectedProject(project);
    setView('repositories');
    setLoading(true);
    setLoadingMessage('Loading repositories...');
    setError(null);
    
    const apiService = ApiManager.getCurrentService();
    apiService.getRepositories(project.id).subscribe({
      next: (data) => {
        console.log('[Repos] Repositories data received:', data);
        if (data && data.value && data.value.length > 0) {
          setRepositories(data.value);
        } else {
          console.warn('[Repos] No repositories data or empty array, adding sample data');
          // Add sample repository data when API returns no repositories
          const sampleRepositories = [
            {
              id: 'sample-repo-1',
              name: 'Sample Repository',
              url: '#',
              project: project,
              defaultBranch: 'refs/heads/main',
              size: 1024,
              remoteUrl: 'https://sample.com/repo.git',
              sshUrl: 'git@sample.com:repo.git',
              webUrl: 'https://sample.com/repo',
              isDisabled: false,
              isInMaintenance: false
            }
          ];
          setRepositories(sampleRepositories);
        }
        setLoading(false);
      },
      error: (error) => {
        console.error('[Repos] Repositories fetch error:', error);
        setError('Failed to fetch repositories: ' + (error.message || 'Unknown error'));
        setLoading(false);
      }
    });
  };
  
  // Handle repository selection
  const handleSelectRepository = (repository) => {
    setSelectedRepository(repository);
    setView('branches');
    setLoading(true);
    setLoadingMessage('Loading branches...');
    setError(null);
    
    const apiService = ApiManager.getCurrentService();
    apiService.getBranches(repository.id, selectedProject.id).subscribe({
      next: (data) => {
        console.log('[Repos] Branches data received:', data);
        if (data && data.value && data.value.length > 0) {
          // Filter to include only branches (not tags or other refs)
          const branchRefs = data.value.filter(ref => ref.name.startsWith('refs/heads/'));
          setBranches(branchRefs.length > 0 ? branchRefs : []);
        } else {
          console.warn('[Repos] No branches data or empty array, adding sample data');
          // Add sample branch data when API returns no branches
          const sampleBranches = [
            {
              name: repository.defaultBranch || 'refs/heads/main',
              objectId: '0123456789abcdef0123456789abcdef01234567',
              creator: {
                id: 'user1',
                displayName: 'Sample User',
                uniqueName: 'user@example.com',
                imageUrl: '#'
              },
              url: '#'
            },
            {
              name: 'refs/heads/develop',
              objectId: 'fedcba9876543210fedcba9876543210fedcba98',
              creator: {
                id: 'user1',
                displayName: 'Sample User',
                uniqueName: 'user@example.com',
                imageUrl: '#'
              },
              url: '#'
            }
          ];
          setBranches(sampleBranches);
        }
        setLoading(false);
      },
      error: (error) => {
        console.error('[Repos] Branches fetch error:', error);
        setError('Failed to fetch branches: ' + (error.message || 'Unknown error'));
        setLoading(false);
      }
    });
  };
  
  // Handle back to projects view
  const handleBackToProjects = () => {
    setSelectedProject(null);
    setSelectedRepository(null);
    setRepositories([]);
    setBranches([]);
    setView('projects');
  };
  
  // Handle back to repositories view
  const handleBackToRepositories = () => {
    setSelectedRepository(null);
    setBranches([]);
    setView('repositories');
  };
  
  // Delete branch
  const handleDeleteBranch = (branch) => {
    if (!selectedRepository || !selectedProject) {
      return Promise.reject(new Error('Repository or project not selected'));
    }
    
    setLoading(true);
    setLoadingMessage('Deleting branch...');
    
    const apiService = ApiManager.getCurrentService();
    return new Promise((resolve, reject) => {
      apiService.deleteBranch(selectedRepository.id, branch.name, selectedProject.id).subscribe({
        next: (response) => {
          console.log('[Repos] Branch deletion response:', response);
          
          // Reload branches to reflect changes
          apiService.getBranches(selectedRepository.id, selectedProject.id).subscribe({
            next: (data) => {
              if (data && data.value) {
                // Filter to include only branches (not tags or other refs)
                const branchRefs = data.value.filter(ref => ref.name.startsWith('refs/heads/'));
                setBranches(branchRefs);
              } else {
                setBranches([]);
              }
              setLoading(false);
              showNotification(`Branch ${branch.name.replace('refs/heads/', '')} deleted successfully`, 'success');
              resolve();
            },
            error: (error) => {
              console.error('[Repos] Branches refresh error:', error);
              setError('Failed to refresh branches list');
              setLoading(false);
              reject(error);
            }
          });
        },
        error: (error) => {
          console.error('[Repos] Branch deletion error:', error);
          setError('Failed to delete branch: ' + (error.message || 'Unknown error'));
          setLoading(false);
          reject(error);
        }
      });
    });
  };
  
  // Render the current view
  const renderCurrentView = () => {
    if (loading) {
      return (
        <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center', p: 4 }}>
          <CircularProgress size={40} sx={{ mb: 2 }} />
          <Typography variant="body1">{loadingMessage}</Typography>
        </Box>
      );
    }
    
    if (error) {
      return (
        <Typography color="error" sx={{ p: 2 }}>
          {error}
        </Typography>
      );
    }
    
    switch (view) {
      case 'repositories':
        return (
          <RepositoriesList
            repositories={repositories}
            selectedProject={selectedProject}
            loading={loading}
            error={error}
            onSelectRepository={handleSelectRepository}
            onBackToProjects={handleBackToProjects}
          />
        );
      
      case 'branches':
        return (
          <BranchesList
            branches={branches}
            selectedProject={selectedProject}
            selectedRepository={selectedRepository}
            loading={loading}
            error={error}
            onBackToRepositories={handleBackToRepositories}
            onDeleteBranch={handleDeleteBranch}
          />
        );
      
      case 'projects':
      default:
        return (
          <ProjectsList
            projects={projects}
            loading={loading}
            error={error}
            onSelectProject={handleSelectProject}
          />
        );
    }
  };
  
  return (
    <Box sx={{ flexGrow: 1 }}>
      <AppBar position="static" sx={{ mb: 2 }}>
        <Toolbar>
          <Typography variant="h6" component="div" sx={{ flexGrow: 1 }}>
            Azure DevOps Git Extension
          </Typography>
          <Button 
            color="inherit" 
            onClick={handleLogout}
            variant="outlined"
            sx={{ 
              borderColor: 'rgba(255,255,255,0.5)', 
              '&:hover': { 
                borderColor: 'white', 
                bgcolor: 'rgba(255,255,255,0.1)' 
              } 
            }}
          >
            Logout
          </Button>
        </Toolbar>
      </AppBar>
      
      <Container maxWidth="lg" sx={{ mt: 4 }}>
        <Paper elevation={3} sx={{ p: 3, borderRadius: 2 }}>
          {renderCurrentView()}
        </Paper>
      </Container>
      
      {/* Notification snackbar */}
      <Snackbar 
        open={notification.open}
        autoHideDuration={6000}
        onClose={handleCloseNotification}
        anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}
      >
        <Alert 
          onClose={handleCloseNotification} 
          severity={notification.severity} 
          sx={{ width: '100%' }}
          variant="filled"
          elevation={6}
        >
          {notification.message}
        </Alert>
      </Snackbar>
    </Box>
  );
}

export default Repos;
