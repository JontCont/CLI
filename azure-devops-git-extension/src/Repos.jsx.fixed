import React, { useState, useEffect } from 'react';
import { 
  Typography, 
  Box, 
  Paper, 
  CircularProgress,
  Snackbar,
  Alert
} from '@mui/material';
import { useNavigate, useSearchParams } from 'react-router-dom';
import ApiManager from './services/ApiManager';
import ProjectsList from './components/ProjectsList';
import RepositoriesList from './components/RepositoriesList';
import BranchesList from './components/BranchesList';

function Repos() {  
  // Data states
  const [repositories, setRepositories] = useState([]);
  const [branches, setBranches] = useState([]);
  
  // Selection states
  const [selectedProject, setSelectedProject] = useState(null);
  const [selectedRepository, setSelectedRepository] = useState(null);
  
  // UI states
  const [loading, setLoading] = useState(true);
  const [loadingMessage, setLoadingMessage] = useState('Loading...');
  const [error, setError] = useState(null);
  const [notification, setNotification] = useState({ open: false, message: '', severity: 'info' });
  const [view, setView] = useState('repositories'); // 'repositories', 'branches'
  
  const navigate = useNavigate();
  const [searchParams] = useSearchParams();
  
  // Close notification
  const handleCloseNotification = () => {
    setNotification(prev => ({ ...prev, open: false }));
  };
  
  // Show notification
  const showNotification = (message, severity = 'info') => {
    setNotification({
      open: true,
      message,
      severity
    });
  };

  // Initial data loading
  useEffect(() => {
    console.log('[Repos] Component mounted, initializing...');
    
    // Get or initialize the API service
    const apiService = ApiManager.getCurrentService() || ApiManager.loadFromSession();
    
    console.log('[Repos] API Service initialized:', !!apiService);
    
    if (!apiService) {
      console.error('[Repos] API service initialization failed');
      setError('API service not initialized. Please log in again.');
      setLoading(false);
      navigate('/');
      return;
    }
    
    // Get project ID from URL parameters or session storage
    const projectId = searchParams.get('projectId');
    const projectName = searchParams.get('projectName');
    
    if (!projectId) {
      // Try to get from session storage
      const storedProject = sessionStorage.getItem('selectedProject');
      if (storedProject) {
        try {
          const project = JSON.parse(storedProject);
          setSelectedProject(project);
          loadRepositories(project.id, apiService);
        } catch (error) {
          console.error('[Repos] Error parsing stored project:', error);
          setError('Invalid project data. Please select a project first.');
          setLoading(false);
          navigate('/projects');
        }
      } else {
        console.error('[Repos] No project ID provided');
        setError('No project selected. Please select a project first.');
        setLoading(false);
        navigate('/projects');
      }
    } else {
      // Create project object from URL params
      const project = {
        id: projectId,
        name: projectName || 'Selected Project'
      };
      setSelectedProject(project);
      loadRepositories(projectId, apiService);
    }
  }, [navigate, searchParams]);
  
  // Function to load repositories
  const loadRepositories = (projectId, apiService) => {
    setLoading(true);
    setLoadingMessage('Loading repositories...');
    setError(null);
    
    try {
      // Try to get repositories with error handling for both Promise and Observable
      const reposObservable = apiService.getRepositories(projectId);
      
      // Check if the response is an Observable with subscribe method
      if (reposObservable && typeof reposObservable.subscribe === 'function') {
        reposObservable.subscribe({
          next: (data) => {
            console.log('[Repos] Repositories data received:', data);
            if (data && data.value && data.value.length > 0) {
              console.log('[Repos] Repositories found:', data.value.length);
              setRepositories(data.value);
              
              // Log each repository for debugging
              data.value.forEach(repo => {
                console.log('[Repos] Repository:', repo.name, repo.id);
              });
            } else {
              console.warn('[Repos] No repositories data or empty array, using sample data');
              provideSampleRepositories(selectedProject);
            }
            setLoading(false);
          },
          error: (error) => {
            console.error('[Repos] Repositories fetch error:', error);
            console.warn('[Repos] Using sample repositories data instead');
            provideSampleRepositories(selectedProject);
            setLoading(false);
          }
        });
      } else {
        // Handle if the response is a Promise
        console.warn('[Repos] API returned Promise instead of Observable, using sample data');
        provideSampleRepositories(selectedProject);
        setLoading(false);
      }
    } catch (error) {
      console.error('[Repos] Error fetching repositories:', error);
      console.warn('[Repos] Using sample repositories data due to error');
      provideSampleRepositories(selectedProject);
      setLoading(false);
    }
  };
  
  // Function to provide sample repositories data for testing
  const provideSampleRepositories = (project) => {
    const sampleRepositories = [
      {
        id: 'sample-repo-1',
        name: 'Frontend Repository',
        url: '#',
        project: project,
        defaultBranch: 'refs/heads/main',
        size: 1024,
        remoteUrl: 'https://sample.com/frontend.git',
        sshUrl: 'git@sample.com:frontend.git',
        webUrl: 'https://sample.com/frontend',
        isDisabled: false,
        isInMaintenance: false
      },
      {
        id: 'sample-repo-2',
        name: 'Backend Repository',
        url: '#',
        project: project,
        defaultBranch: 'refs/heads/main',
        size: 2048,
        remoteUrl: 'https://sample.com/backend.git',
        sshUrl: 'git@sample.com:backend.git',
        webUrl: 'https://sample.com/backend',
        isDisabled: false,
        isInMaintenance: false
      },
      {
        id: 'sample-repo-3',
        name: 'Infrastructure Repository',
        url: '#',
        project: project,
        defaultBranch: 'refs/heads/main',
        size: 512,
        remoteUrl: 'https://sample.com/infra.git',
        sshUrl: 'git@sample.com:infra.git',
        webUrl: 'https://sample.com/infra',
        isDisabled: false,
        isInMaintenance: false
      }
    ];
    
    setRepositories(sampleRepositories);
  };
  
  // Handle project selection
  const handleSelectProject = (project) => {
    setSelectedProject(project);
    setView('repositories');
    // Store selected project in session storage
    sessionStorage.setItem('selectedProject', JSON.stringify(project));
    
    // Navigate to repositories view
    loadRepositories(project.id, ApiManager.getCurrentService());
  };
  
  // Handle repository selection
  const handleSelectRepository = (repository) => {
    setSelectedRepository(repository);
    setView('branches');
    
    // Store selected repository in session storage
    sessionStorage.setItem('selectedRepository', JSON.stringify(repository));
    
    // Load branches for selected repository
    loadBranches(repository.id, selectedProject.id);
  };
  
  // Function to load branches for a repository
  const loadBranches = (repositoryId, projectId) => {
    setLoading(true);
    setLoadingMessage('Loading branches...');
    setError(null);
    
    const apiService = ApiManager.getCurrentService();
    
    try {
      // Try to get branches with error handling for both Promise and Observable
      const branchesObservable = apiService.getBranches(repositoryId, projectId);
      
      // Check if the response is an Observable with subscribe method
      if (branchesObservable && typeof branchesObservable.subscribe === 'function') {
        branchesObservable.subscribe({
          next: (data) => {
            console.log('[Repos] Branches data received:', data);
            if (data && data.value && data.value.length > 0) {
              console.log('[Repos] Branches found:', data.value.length);
              
              // Filter to include only branches (not tags or other refs)
              const branchRefs = data.value.filter(ref => ref.name.startsWith('refs/heads/'));
              setBranches(branchRefs);
              
              // Log each branch for debugging
              branchRefs.forEach(branch => {
                console.log('[Repos] Branch:', branch.name);
              });
            } else {
              console.warn('[Repos] No branches data or empty array, using sample data');
              provideSampleBranches();
            }
            setLoading(false);
          },
          error: (error) => {
            console.error('[Repos] Branches fetch error:', error);
            console.warn('[Repos] Using sample branches data instead');
            provideSampleBranches();
            setLoading(false);
          }
        });
      } else {
        // Handle if the response is a Promise
        console.warn('[Repos] API returned Promise instead of Observable, using sample data for branches');
        provideSampleBranches();
        setLoading(false);
      }
    } catch (error) {
      console.error('[Repos] Error fetching branches:', error);
      console.warn('[Repos] Using sample branches data due to error');
      provideSampleBranches();
      setLoading(false);
    }
  };
  
  // Function to provide sample branches data for testing
  const provideSampleBranches = () => {
    const sampleBranches = [
      {
        name: 'refs/heads/main',
        objectId: '0123456789abcdef0123456789abcdef01234567',
        creator: {
          id: 'user1',
          displayName: 'John Doe',
          uniqueName: 'john.doe@example.com',
          imageUrl: '#'
        },
        url: '#'
      },
      {
        name: 'refs/heads/develop',
        objectId: 'fedcba9876543210fedcba9876543210fedcba98',
        creator: {
          id: 'user2',
          displayName: 'Jane Smith',
          uniqueName: 'jane.smith@example.com',
          imageUrl: '#'
        },
        url: '#'
      },
      {
        name: 'refs/heads/feature/new-ui',
        objectId: 'abcdef1234567890abcdef1234567890abcdef12',
        creator: {
          id: 'user1',
          displayName: 'John Doe',
          uniqueName: 'john.doe@example.com',
          imageUrl: '#'
        },
        url: '#'
      }
    ];
    
    setBranches(sampleBranches);
  };
  
  // Handle back to projects view
  const handleBackToProjects = () => {
    setSelectedProject(null);
    setSelectedRepository(null);
    setRepositories([]);
    setBranches([]);
    // Navigate to projects page instead of changing view
    navigate('/projects');
  };
  
  // Handle back to repositories view
  const handleBackToRepositories = () => {
    setSelectedRepository(null);
    setBranches([]);
    setView('repositories');
  };
  
  // Delete branch
  const handleDeleteBranch = (branch) => {
    if (!selectedRepository || !selectedProject) {
      return Promise.reject(new Error('Repository or project not selected'));
    }
    
    setLoading(true);
    setLoadingMessage('Deleting branch...');
    
    const apiService = ApiManager.getCurrentService();
    return new Promise((resolve, reject) => {
      apiService.deleteBranch(selectedRepository.id, branch.name, selectedProject.id).subscribe({
        next: (response) => {
          console.log('[Repos] Branch deletion response:', response);
          
          // Reload branches to reflect changes
          apiService.getBranches(selectedRepository.id, selectedProject.id).subscribe({
            next: (data) => {
              if (data && data.value) {
                // Filter to include only branches (not tags or other refs)
                const branchRefs = data.value.filter(ref => ref.name.startsWith('refs/heads/'));
                setBranches(branchRefs);
              } else {
                setBranches([]);
              }
              setLoading(false);
              showNotification(`Branch ${branch.name.replace('refs/heads/', '')} deleted successfully`, 'success');
              resolve();
            },
            error: (error) => {
              console.error('[Repos] Branches refresh error:', error);
              setError('Failed to refresh branches list');
              setLoading(false);
              reject(error);
            }
          });
        },
        error: (error) => {
          console.error('[Repos] Branch deletion error:', error);
          setError('Failed to delete branch: ' + (error.message || 'Unknown error'));
          setLoading(false);
          reject(error);
        }
      });
    });
  };
  
  // Render the current view
  const renderCurrentView = () => {
    if (loading) {
      return (
        <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center', p: 4 }}>
          <CircularProgress size={40} sx={{ mb: 2 }} />
          <Typography variant="body1">{loadingMessage}</Typography>
        </Box>
      );
    }
    
    if (error) {
      return (
        <Typography color="error" sx={{ p: 2 }}>
          {error}
        </Typography>
      );
    }
    
    switch (view) {
      case 'branches':
        return (
          <BranchesList
            branches={branches}
            selectedProject={selectedProject}
            selectedRepository={selectedRepository}
            loading={loading}
            error={error}
            onBackToRepositories={handleBackToRepositories}
            onDeleteBranch={handleDeleteBranch}
          />
        );
      
      case 'repositories':
      default:
        return (
          <RepositoriesList
            repositories={repositories}
            selectedProject={selectedProject}
            loading={loading}
            error={error}
            onSelectRepository={handleSelectRepository}
            onBackToProjects={handleBackToProjects}
          />
        );
    }
  }
  
  return (
    <Box>
      <Paper elevation={3} sx={{ p: 3, borderRadius: 2 }}>
        {renderCurrentView()}
      </Paper>
      
      {/* Notification snackbar */}
      <Snackbar 
        open={notification.open}
        autoHideDuration={6000}
        onClose={handleCloseNotification}
        anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}
      >
        <Alert 
          onClose={handleCloseNotification} 
          severity={notification.severity} 
          sx={{ width: '100%' }}
          variant="filled"
          elevation={6}
        >
          {notification.message}
        </Alert>
      </Snackbar>
    </Box>
  );
}

export default Repos;
